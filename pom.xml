<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com-hotel-aaf</groupId>
    <artifactId>com-hotel-aaf</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>1.8</java.version>

        <testng.threadcount>$testng.threadcount</testng.threadcount>
        <Environment>$Environment</Environment>
        <Browser>$Browser</Browser>

        <ExecutionType>$ExecutionType</ExecutionType>
        <RemoteExecutionGrid>$RemoteExecutionGrid</RemoteExecutionGrid>

    </properties>
    <dependencies>
    <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
    <dependency>
        <groupId>org.seleniumhq.selenium</groupId>
        <artifactId>selenium-java</artifactId>
        <version>4.6.0</version>
    </dependency>
        <!-- https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager -->
        <dependency>
            <groupId>io.github.bonigarcia</groupId>
            <artifactId>webdrivermanager</artifactId>
            <version>5.3.1</version>
        </dependency>
        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>5.2.0</version>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-picocontainer</artifactId>
            <version>5.2.0</version>
        </dependency>

        <dependency>
        <groupId>io.cucumber</groupId>
        <artifactId>cucumber-testng</artifactId>
        <version>5.5.0</version>
        </dependency>
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>6.11</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.rest-assured/rest-assured -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>5.2.0</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>1.2.17</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>1.6</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.appium/java-client -->
        <dependency>
            <groupId>io.appium</groupId>
            <artifactId>java-client</artifactId>
            <version>8.2.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-server -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-server</artifactId>
            <version>3.141.59</version>
        </dependency><!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>31.1-jre</version>
        </dependency>


    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.10.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <!--<plugin>
               <groupId>org.apache.maven.plugins</groupId>
               <artifactId>maven-surefire-plugin</artifactId>
               <configuration>
                  <properties>
                     <property>
                        <name>dataproviderthreadcount</name>
                        <value>${testng.threadcount}</value>
                     </property>
                  </properties>
               </configuration>
            </plugin>-->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M4</version>
                <configuration>
                    <parallel>true</parallel>
                    <includes>
                        <include>com.live.hrms.runner.TestNGRunner</include>
                    </includes>
                    <properties>
                        <property>
                            <name>dataproviderthreadcount</name>
                            <value>${testng.threadcount}</value>
                        </property>
                    </properties>
                </configuration>
            </plugin>

        </plugins>
    </build>
</project>
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class HashGenerator {

    // Method to generate HMAC SHA256 hash and format it as required
    public static String generateHash(String message, byte[] secretKey) throws Exception {
        // Create an HMAC SHA256 instance
        Mac sha256_HMAC = Mac.getInstance("HmacSHA256");
        SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey, "HmacSHA256");
        sha256_HMAC.init(secretKeySpec);

        // Generate the hash
        byte[] hashBytes = sha256_HMAC.doFinal(message.getBytes(StandardCharsets.UTF_8));

        // Convert hash to Base64 string
        String hashInBase64 = Base64.getEncoder().encodeToString(hashBytes);

        // Replace special characters
        hashInBase64 = hashInBase64.replace("/", "_").replace("+", "-").replace("=", "");

        return hashInBase64;
    }

    // Method to generate the Mac ID
    public static String getMacID(byte[] decodedSecret, String version, String appID) throws Exception {
        // Get the current timestamp in milliseconds
        long timestamp = System.currentTimeMillis();

        // Form the message
        String message = appID + "-" + version + "-" + timestamp;

        // Generate and return the hash
        return generateHash(message, decodedSecret);
    }

    public static void main(String[] args) {
        try {
            // Replace with your values
            String appID = ""; // Your App ID
            String secret = ""; // Your Base64-encoded secret
            String version = ""; // Your version string

            // Decode the Base64-encoded secret
            byte[] decodedSecret = Base64.getDecoder().decode(secret);

            // Generate the Mac ID
            String mac = getMacID(decodedSecret, version, appID);

            // Output the Mac ID
            System.out.println("Generated Mac ID: " + mac);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
